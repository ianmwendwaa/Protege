//<------------------------------------Add note activity---------------------------------------->\\

//private lateinit var rootView: ScrollView


//    private lateinit var toolBar: LinearLayout
//    private lateinit var boldButton: Button
//    private lateinit var italicButton: Button
//    private lateinit var underline: LinearLayout
//    private lateinit var bullets: LinearLayout
//    private lateinit var voiceRecorder: LinearLayout
//    private lateinit var attachment: LinearLayout

//        passwordMagic =findViewById(R.id.passwordSetter)

//        toolBar = findViewById(R.id.toolbar)
//        boldButton = findViewById(R.id.boldButton)
//        italicButton = findViewById(R.id.italicButton)
//        underline = findViewById(R.id.underline)
//        bullets = findViewById(R.id.bullets)
//        attachment = findViewById(R.id.attachment)
//        voiceRecorder = findViewById(R.id.voiceRecorder)
//        rootView = findViewById(R.id.main)


////        Setting the toolbar to go with the flow of the keyboard
//        rootView.viewTreeObserver.addOnGlobalLayoutListener {
//            val rect = Rect()
//            rootView.getWindowVisibleDisplayFrame(rect)
//            val screenHeight = rootView.rootView.height
//            val keyboardHeight = screenHeight - rect.bottom
////            if(keyboardHeight > 0){
////                toolBar.translationY = -keyboardHeight.toFloat()
////            }else{
////                toolBar.translationY = 0f
////            }
//        }


//        boldButton.setOnClickListener {
//            applyBoldToText(contentEditText)
//        }
//        italicButton.setOnClickListener {
//            applyItalicToText(contentEditText)
//        }
//        underline.setOnClickListener {
//            applyUnderlineToText(contentEditText)
//        }
//        bullets.setOnClickListener {
//            Toast.makeText(this,"Still in development; Should display bullets..",Toast.LENGTH_LONG).show()
//        }
//        attachment.setOnClickListener {
//            val pickImageIntent = Intent(Intent.ACTION_PICK,MediaStore.Images.Media.EXTERNAL_CONTENT_URI)
//            pickImageLauncher.launch(pickImageIntent)
//        }
//        voiceRecorder.setOnClickListener {
//            Toast.makeText(this,"Still in development; Should record voice notes..",Toast.LENGTH_LONG).show()
//        }

val pickImageLauncher =
            registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
                if (result.resultCode == Activity.RESULT_OK) {
                    val data: Intent? = result.data
                    val imageUri = data?.data
                    if (imageUri != null) {
                        val imageSpan = Utils.ResizableImageSpan(this, imageUri, 500, 700)
                        val editable = contentEditText.editableText
                        editable.insert(contentEditText.selectionStart, " ")
                        editable.setSpan(
                            imageSpan,
                            editable.length - 1,
                            editable.length,
                            Spannable.SPAN_EXCLUSIVE_EXCLUSIVE
                        )
                    }
                }
            }


//            findNavController().navigate(
//                R.id.idTVDate, bundleOf("newNotePosition" to newNotePosition)
//            )

//<----------------------------------UpdateNoteActivity-------------------------------------------->

//        binding.main2.viewTreeObserver.addOnGlobalLayoutListener {
//            val rect = Rect()
//            binding.main2.getWindowVisibleDisplayFrame(rect)
//            val screenHeight = binding.main2.rootView.height
//            val keyboardHeight = screenHeight - rect.bottom
//            if(keyboardHeight > 0){
//                binding.toolbar.translationY = -keyboardHeight.toFloat()
//            }else{
//                binding.toolbar.translationY = 0f
//            }
//        }
//        binding.boldButton.setOnClickListener {
//            applyBold(binding.updateContentEditText)
//        }
//        binding.italicButton.setOnClickListener {
//            applyItalics(binding.updateContentEditText)
//        }
//        binding.underline.setOnClickListener {
//            underlineText(binding.updateContentEditText)
//        }
//        binding.bullets.setOnClickListener {
//            Toast.makeText(this,"Still in development",Toast.LENGTH_LONG).show()
//        }
//        binding.attachment.setOnClickListener {
//            val pickImageIntent = Intent(Intent.ACTION_PICK,MediaStore.Images.Media.EXTERNAL_CONTENT_URI)
//            pickImageLauncher.launch(pickImageIntent)
//        }
//        binding.voiceRecorder.setOnClickListener {
//            Toast.makeText(this,"Still in development",Toast.LENGTH_LONG).show()
//        }

//<---------------------------------Bottom sheet Fragment------------------------------------------>

//            val formatter = SimpleDateFormat("MM/dd")
//            val date = Date()
//            val current = formatter.format(date)
//            val timeSetListener = TimePickerDialog.OnTimeSetListener { _, hour:Int, minute:Int ->
//                calendar.set(Calendar.HOUR_OF_DAY, hour)
//                calendar.set(Calendar.MINUTE, minute)
//                myHours = hour
//                myMinutes = minute
//                if (myMinutes<10){
//                    datePicked.text = "$current $myHours:0$myMinutes"
//                }else{
//                    datePicked.text = "$current  $myHours:$myMinutes"
//                }



//    private lateinit var drawerLayout: DrawerLayout
//    private lateinit var navigationView: NavigationView
//    private lateinit var toggle: ActionBarDrawerToggle


//        drawerLayout = binding.drawerLayout
////        navigationView = binding.navigationView
//        navigationView.setNavigationItemSelectedListener(this)

//        val menu = navigationView.menu
//        val indieTypeface = ResourcesCompat.getFont(this,R.font.indie_flower)
//
//        for (i in 0 until menu.size()){
//            val menuItem = menu.getItem(i)
//            val navigationMenuItemView = menuItem.actionView as NavigationMenuItemView
//            val textView = navigationMenuItemView.findViewById<TextView>(R.id.)
//            textView.setTypeface(indieTypeface,Typeface.NORMAL)
//        }
//
//        toggle = ActionBarDrawerToggle(
//            this,
//            drawerLayout,
//            binding.toolbar,
//            R.string.navigation_drawer_open,
//            R.string.navigation_drawer_close
//        )
//        drawerLayout.addDrawerListener(toggle)
//        toggle.syncState()



//    override fun onNavigationItemSelected(item: MenuItem): Boolean {
//        when(item.itemId){
//            R.id.nav_password->{
//                replaceFragment(com.example.notessqlite.archives.ui.password.PasswordFragment())
//            }
//            R.id.nav_trash->{
//                replaceFragment(TrashFragment())
//            }
//            R.id.nav_relationships->{
//                replaceFragment(RelationshipsFragment())
//            }
//        }
//        drawerLayout.closeDrawer(GravityCompat.START)
//        return true
//    }

//    @Deprecated("This method has been deprecated in favor of using the\n      {@link OnBackPressedDispatcher} via {@link #getOnBackPressedDispatcher()}.\n      The OnBackPressedDispatcher controls how back button events are dispatched\n      to one or more {@link OnBackPressedCallback} objects.",
//        ReplaceWith("super.onBackPressed()", "androidx.appcompat.app.AppCompatActivity")
//    )
//    override fun onBackPressed() {
//        if (drawerLayout.isDrawerOpen(GravityCompat.START)){
//            drawerLayout.closeDrawer(GravityCompat.START)
//        }else{
//            super.onBackPressed()
//        }
//    }


//<------------------------Jetpack compose------------------------------>
package com.example.notessqlite

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.animation.core.animate
import androidx.compose.animation.core.tween
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.offset
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.material3.Button
import androidx.compose.material3.Icon
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.focus.focusModifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.Path
import androidx.compose.ui.graphics.drawscope.Fill
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.colorResource
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.notessqlite.todo.titleExtra
import com.example.notessqlite.ui.theme.NotesSQLiteTheme
import kotlin.math.cos
import kotlin.math.sin
import kotlin.random.Random

class HomePage : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            NotesSQLiteTheme {
                recycleCodeBase()
            }
        }
    }
}

@Composable
fun ReuseableCodeBase(imageResId:Int, imageTxt:String,onClick:()->Unit) {
    Row(
        modifier = Modifier
            .clickable { onClick() }
            .background(colorResource(R.color.status_bar_color))
            .padding(16.dp),
        verticalAlignment = Alignment.CenterVertically
    ) {
        Icon(
            painter = painterResource(id = imageResId),
            contentDescription = "icons",
            modifier = Modifier.size(24.dp)
        )
        Spacer(modifier = Modifier.width(8.dp))
        Text(
            text = imageTxt,
            fontSize = 16.sp
        )
    }
}
@Composable
fun recycleCodeBase(){
    Column(
        modifier = Modifier
            .padding(
            start = 20.dp,
            top = 35.dp,
            end = 10.dp,
            bottom = 20.dp,
        )
            .fillMaxSize()
            .fillMaxWidth(),
        verticalArrangement = Arrangement.spacedBy(8.dp)

    ){
        ReuseableCodeBase(
            imageResId = R.drawable.ic_notes,
            imageTxt = "Notes",
            onClick = {

            }
        )
        ReuseableCodeBase(
            imageResId = R.drawable.ic_todo,
            imageTxt = "Todo",
            onClick = {

            }
        )
        ReuseableCodeBase(
            imageResId = R.drawable.ic_archives,
            imageTxt = "Archives",
            onClick = {

            }
        )
        ReuseableCodeBase(
            imageResId = R.drawable.category_icon,
            imageTxt = "Folders",
            onClick = {

            }
        )
        ReuseableCodeBase(
            imageResId = R.drawable.birthday_icon,
            imageTxt = "Notes",
            onClick = {

            }
        )

    }
}
@Preview(showBackground = true)
@Composable
fun GreetingPreview() {
    NotesSQLiteTheme {
        recycleCodeBase()
    }
}

        <activity
            android:name=".HomePage"
            android:exported="true"
            android:label="@string/title_activity_home_page"
            android:theme="@style/Theme.NotesSQLite" />


            fun getCelebration():String{
                        val month = Calendar.getInstance().get(Calendar.MONTH)+1
                        val day = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)
                        return when {
                            month == 1 && day == 12 -> getString(R.string.odriya)
                            month == 1 && day == 31 -> getString(R.string.beryl)
                            month == 2 && day == 7 -> getString(R.string.christine)
                            month == 2 && day == 19 -> getString(R.string.stephanie)
                            month == 3 && day == 1 -> getString(R.string.ann)
                            month == 4 && day == 7 -> getString(R.string.mine)
                            month == 5 && day == 1 -> getString(R.string.clarissa)
                            month == 5 && day == 6 -> getString(R.string.aiyana)
                            month == 5 && day == 12 -> "It's Lorna's birthday!❤️"
                            month == 5 && day == 17 -> getString(R.string.kimberly)
                            month == 5 && day == 13 -> getString(R.string.megan)
                            month == 8 && day == 2 -> getString(R.string.seanice)
                            month == 8 && day == 22 -> getString(R.string.amandine)
                            month == 9 && day == 29 -> getString(R.string.lashley)
                            month == 10 && day == 29 -> getString(R.string.simone)
                            month == 11 && day == 23 -> getString(R.string.mum)
                            month == 12 && day == 5 -> getString(R.string.kailetu)
                            else -> getGreeting()
                        }
                    }
                    val celebration = getCelebration()
                    greetings.typeWriteMessage(lifecycleScope,celebration,100)